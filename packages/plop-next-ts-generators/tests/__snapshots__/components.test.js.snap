// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`component generators should generate core single-part component 1`] = `
"import {
  chakra,
  forwardRef,
  ThemingProps,
  omitThemingProps,
  useStyleConfig,
  HTMLChakraProps,
} from '@chakra-ui/react';
import { __DEV__ } from '@chakra-ui/utils';

export interface ITestComponentProps extends HTMLChakraProps<'div'>, ThemingProps {}

export const TestComponent = forwardRef<ITestComponentProps, 'div'>(function TestComponent(
  props,
  ref,
) {
  const styles = useStyleConfig('TestComponent', props);

  const {
    // extract components props here
    ...rest
  } = omitThemingProps(props);

  const componentStyles = {
    // place to add common styles
    ...styles,
  };

  return <chakra.div ref={ref} __css={componentStyles} {...rest} />;
});

if (__DEV__) {
  TestComponent.displayName = 'TestComponent';
}
"
`;

exports[`component generators should generate core single-part component 2`] = `
"import { ComponentMeta, ComponentStory } from '@storybook/react';

import { Story, Meta } from '@storybook/react/types-6-0';

import { TestComponent } from './TestComponent';

export default {
  title: 'UI/core/TestComponent',
  component: TestComponent,
} as ComponentMeta<typeof TestComponent>;

const Template: ComponentStory<typeof TestComponent> = (args) => <TestComponent {...args} />;

export const Basic = Template.bind({});
Basic.args = {
  /* the args you need here will depend on your component */
};
"
`;

exports[`component generators should generate core single-part component 3`] = `
"import React from 'react';

import { TestComponent } from './TestComponent';
import { render } from 'test-utils';

describe('TestComponent', () => {
  it('should matches snapshot', () => {
    const { asFragment } = render(<TestComponent />);

    expect(asFragment()).toMatchSnapshot();
  });
});
"
`;

exports[`component generators should generate core single-part component 4`] = `
"import { defineStyle, defineStyleConfig } from "@chakra-ui/styled-system";

const baseStyle = defineStyle({});

const variantGhost = defineStyle({});

const variantOutline = defineStyle({});

const variantSolid = defineStyle({});

const variantLink = defineStyle({});

const variantUnstyled = defineStyle({});

const variants = {
  ghost: variantGhost,
  outline: variantOutline,
  solid: variantSolid,
  link: variantLink,
  unstyled: variantUnstyled,
}

const sizes = {
  lg: defineStyle({}),
  md: defineStyle({}),
  sm: defineStyle({}),
  xs: defineStyle({}),
}

export const testComponentTheme = defineStyleConfig({
  baseStyle,
  variants,
  sizes,
  defaultProps: {
    variant: "solid",
    size: "md",
    colorScheme: "gray",
  },
});
"
`;

exports[`component generators should generate features component 1`] = `
"import { FC } from 'react';
import { Box } from '@chakra-ui/react';

export interface ITestFeaturesComponentProps {}

export const TestFeaturesComponent: FC<ITestFeaturesComponentProps> = () => {
	return <Box></Box>;
};
"
`;

exports[`component generators should generate features component 2`] = `
"import { ComponentMeta, ComponentStory } from '@storybook/react';

import { TestFeaturesComponent } from './TestFeaturesComponent';

export default {
  title: 'UI/features/TestFeaturesComponent',
  component: TestFeaturesComponent,
} as ComponentMeta<typeof TestFeaturesComponent>;

const Template: ComponentStory<typeof TestFeaturesComponent> = (args) => <TestFeaturesComponent {...args} />;

export const Basic = Template.bind({});
Basic.args = {
  /* the args you need here will depend on your component */
};
"
`;

exports[`component generators should generate features component 3`] = `
"import React from 'react';

import { TestFeaturesComponent } from './TestFeaturesComponent';
import { render } from 'test-utils';

describe('TestFeaturesComponent', () => {
  it('should matches snapshot', () => {
    const { asFragment } = render(<TestFeaturesComponent />);

    expect(asFragment()).toMatchSnapshot();
  });
});
"
`;

exports[`component generators should generate shared component 1`] = `
"import { FC } from 'react';
import { Box } from '@chakra-ui/react';

export interface ITestSharedComponentProps {}

export const TestSharedComponent: FC<ITestSharedComponentProps> = () => {
	return <Box></Box>;
};
"
`;

exports[`component generators should generate shared component 2`] = `
"import { ComponentMeta, ComponentStory } from '@storybook/react';

import { TestSharedComponent } from './TestSharedComponent';

export default {
  title: 'UI/shared/TestSharedComponent',
  component: TestSharedComponent,
} as ComponentMeta<typeof TestSharedComponent>;

const Template: ComponentStory<typeof TestSharedComponent> = (args) => <TestSharedComponent {...args} />;

export const Basic = Template.bind({});
Basic.args = {
  /* the args you need here will depend on your component */
};
"
`;

exports[`component generators should generate shared component 3`] = `
"import React from 'react';

import { TestSharedComponent } from './TestSharedComponent';
import { render } from 'test-utils';

describe('TestSharedComponent', () => {
  it('should matches snapshot', () => {
    const { asFragment } = render(<TestSharedComponent />);

    expect(asFragment()).toMatchSnapshot();
  });
});
"
`;
